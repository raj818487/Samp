// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SAMP.Persistence;

#nullable disable

namespace SAMP.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240625130126_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AitypeAmenity", b =>
                {
                    b.Property<int>("AitypeId")
                        .HasColumnType("integer")
                        .HasColumnName("AITypeId");

                    b.Property<int>("AmenityId")
                        .HasColumnType("integer");

                    b.HasKey("AitypeId", "AmenityId");

                    b.HasIndex(new[] { "AitypeId" }, "IX_AITypeAmenity_AITypeId");

                    b.HasIndex(new[] { "AmenityId" }, "IX_AITypeAmenity_AmenityId");

                    b.ToTable("AITypeAmenity", (string)null);
                });

            modelBuilder.Entity("AitypeInventory", b =>
                {
                    b.Property<int>("AitypeId")
                        .HasColumnType("integer")
                        .HasColumnName("AITypeId");

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer");

                    b.HasKey("AitypeId", "InventoryId");

                    b.HasIndex(new[] { "AitypeId" }, "IX_AITypeInventory_AITypeId");

                    b.HasIndex(new[] { "InventoryId" }, "IX_AITypeInventory_InventoryId");

                    b.ToTable("AITypeInventory", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("ReportRole", b =>
                {
                    b.Property<int>("ReportId")
                        .HasColumnType("integer");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("ReportId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ReportRoles", (string)null);
                });

            modelBuilder.Entity("RoleQueryRoomGroup", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<int>("QueryRoomGroupId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "QueryRoomGroupId");

                    b.HasIndex("QueryRoomGroupId");

                    b.ToTable("RoleQueryRoomGroup", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AccDetail", b =>
                {
                    b.Property<int>("AccReqId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<string>("ActCheckInTime")
                        .HasColumnType("text");

                    b.Property<string>("AllotedById")
                        .HasColumnType("text");

                    b.Property<string>("CounterCheckInTime")
                        .HasColumnType("text");

                    b.Property<string>("CounterCheckOutTime")
                        .HasColumnType("text");

                    b.Property<int>("GentsCount")
                        .HasColumnType("integer");

                    b.Property<int>("IsPrivate")
                        .HasColumnType("integer");

                    b.Property<int>("LadiesCount")
                        .HasColumnType("integer");

                    b.HasKey("AccReqId", "RoomId");

                    b.HasIndex(new[] { "AccReqId" }, "IX_AccDetail_AccReqId");

                    b.HasIndex(new[] { "ActCheckInTime" }, "IX_AccDetail_ActCheckInTime");

                    b.HasIndex(new[] { "AllotedById" }, "IX_AccDetail_AllotedById");

                    b.HasIndex(new[] { "CounterCheckInTime" }, "IX_AccDetail_CounterCheckInTime");

                    b.HasIndex(new[] { "CounterCheckOutTime" }, "IX_AccDetail_CounterCheckOutTime");

                    b.HasIndex(new[] { "RoomId" }, "IX_AccDetail_RoomId");

                    b.ToTable("AccDetail", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AccReq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("BackupMobile")
                        .HasColumnType("text");

                    b.Property<string>("BookingRefNo")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<int>("ChildrenCount")
                        .HasColumnType("integer");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("ConsentedAt")
                        .HasColumnType("text");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<decimal?>("Deposit")
                        .HasColumnType("DECIMAL(12, 2)");

                    b.Property<string>("DeptName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ExpCheckInTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExpCheckOutTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GentsCount")
                        .HasColumnType("integer");

                    b.Property<string>("GuestRemarks")
                        .HasColumnType("text");

                    b.Property<int?>("HaribhaktId")
                        .HasColumnType("integer");

                    b.Property<int>("IsBkpMobWhatsApp")
                        .HasColumnType("integer");

                    b.Property<int>("IsKeepingVehicle")
                        .HasColumnType("integer");

                    b.Property<int>("IsLocalPhoneWhatsApp")
                        .HasColumnType("integer");

                    b.Property<int>("IsPriMobWhatsApp")
                        .HasColumnType("integer");

                    b.Property<int>("LadiesCount")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("LocalPhone")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("NativePlace")
                        .HasColumnType("text");

                    b.Property<string>("OfficeRemarks")
                        .HasColumnType("text");

                    b.Property<decimal?>("PaidRent")
                        .HasColumnType("DECIMAL(12, 2)");

                    b.Property<string>("PrimaryMobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<int?>("ReqTransModeId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ReturnedDeposit")
                        .HasColumnType("DECIMAL(12, 2)");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("UtsavId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BookingRefNo" }, "IX_AccReq_BookingRefNo")
                        .IsUnique();

                    b.HasIndex(new[] { "Category" }, "IX_AccReq_Category");

                    b.HasIndex(new[] { "CityId" }, "IX_AccReq_CityId");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_AccReq_CreatedAt");

                    b.HasIndex(new[] { "CreatedById" }, "IX_AccReq_CreatedById");

                    b.HasIndex(new[] { "ExpCheckInTime" }, "IX_AccReq_ExpCheckInTime");

                    b.HasIndex(new[] { "ExpCheckOutTime" }, "IX_AccReq_ExpCheckOutTime");

                    b.HasIndex(new[] { "HaribhaktId" }, "IX_AccReq_HaribhaktId");

                    b.HasIndex(new[] { "ModifiedAt" }, "IX_AccReq_ModifiedAt");

                    b.HasIndex(new[] { "ModifiedById" }, "IX_AccReq_ModifiedById");

                    b.HasIndex(new[] { "ReqTransModeId" }, "IX_AccReq_ReqTransModeId");

                    b.HasIndex(new[] { "StatusId" }, "IX_AccReq_StatusId");

                    b.HasIndex(new[] { "UtsavId" }, "IX_AccReq_UtsavId");

                    b.ToTable("AccReq", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AccReqDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccReqId")
                        .HasColumnType("integer");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("RelationId")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccReqId" }, "IX_AccReqDetail_AccReqId");

                    b.HasIndex(new[] { "RelationId" }, "IX_AccReqDetail_RelationId");

                    b.ToTable("AccReqDetail", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AccReqStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_AccReqStatus_Name")
                        .IsUnique();

                    b.ToTable("AccReqStatus", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AccReqToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccReqId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<string>("HashToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("InviteeCityId")
                        .HasColumnType("integer");

                    b.Property<string>("InviteeName")
                        .HasColumnType("text");

                    b.Property<string>("InviteePhone")
                        .HasColumnType("text");

                    b.Property<int>("InviterCityId")
                        .HasColumnType("integer");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("LastAccessedAt")
                        .HasColumnType("text");

                    b.Property<string>("LastAccessedIp")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedAt")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("text");

                    b.Property<int?>("UtsavId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccReqId" }, "IX_AccReqToken_AccReqId");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_AccReqToken_CreatedAt");

                    b.HasIndex(new[] { "CreatedById" }, "IX_AccReqToken_CreatedById");

                    b.HasIndex(new[] { "HashToken" }, "IX_AccReqToken_HashToken");

                    b.HasIndex(new[] { "InviterCityId" }, "IX_AccReqToken_InviterCityId");

                    b.HasIndex(new[] { "ModifiedAt" }, "IX_AccReqToken_ModifiedAt");

                    b.HasIndex(new[] { "ModifiedById" }, "IX_AccReqToken_ModifiedById");

                    b.ToTable("AccReqToken", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Aitype", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AIType", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<int>("IsBoolean")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Amenity_Name")
                        .IsUnique();

                    b.ToTable("Amenity", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UQ_AspNetRoles_Name")
                        .IsUnique();

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("BookingPrefix")
                        .HasColumnType("text");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("ConsentedAt")
                        .HasColumnType("text");

                    b.Property<string>("CounterId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("EmailConfirmed")
                        .HasColumnType("integer");

                    b.Property<int>("EnforceChangePassword")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LockoutEnabled")
                        .HasColumnType("integer");

                    b.Property<string>("LockoutEnd")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("PhoneNumberConfirmed")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("SevaDepartment")
                        .HasColumnType("text");

                    b.Property<int>("TwoFactorEnabled")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<int?>("UtsavId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "CityId" }, "IX_AspNetUsers_CityId");

                    b.HasIndex(new[] { "PhoneNumber" }, "IX_AspNetUsers_PhoneNumber")
                        .IsUnique();

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("C");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_City_Name");

                    b.HasIndex(new[] { "StateId" }, "IX_City_StateId");

                    b.HasIndex(new[] { "Type" }, "IX_City_Type");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("text");

                    b.Property<string>("AreaOrMilestone")
                        .HasColumnType("text");

                    b.Property<string>("BackupMobile")
                        .HasColumnType("text");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("IsBkpMobWhatsApp")
                        .HasColumnType("integer");

                    b.Property<int>("IsPriMobWhatsApp")
                        .HasColumnType("integer");

                    b.Property<int>("IsSatsangi")
                        .HasColumnType("integer");

                    b.Property<string>("Landline1")
                        .HasColumnType("text");

                    b.Property<string>("Landline2")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryMobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UniqueId")
                        .HasColumnType("text");

                    b.Property<int>("UtsavId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UniqueId" }, "IX_Contact_UniqueId")
                        .IsUnique();

                    b.HasIndex(new[] { "UtsavId" }, "IX_Contact_UtsavId");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.ContactPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("integer");

                    b.Property<int>("IsWhatsApp")
                        .HasColumnType("integer");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContactId" }, "IX_ContactPhone_ContactId");

                    b.ToTable("ContactPhone", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_ContactType_Name")
                        .IsUnique();

                    b.ToTable("ContactType", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Continent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IsActive")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Continent_Name")
                        .IsUnique();

                    b.ToTable("Continent", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Counter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("UtsavId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_Counter_CreatedAt");

                    b.HasIndex(new[] { "CreatedById" }, "IX_Counter_CreatedById");

                    b.HasIndex(new[] { "ModifiedAt" }, "IX_Counter_ModifiedAt");

                    b.HasIndex(new[] { "ModifiedById" }, "IX_Counter_ModifiedById");

                    b.HasIndex(new[] { "UtsavId" }, "IX_Counter_UtsavId");

                    b.ToTable("Counter", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.CounterRoomGroup", b =>
                {
                    b.Property<int>("UtsavId")
                        .HasColumnType("integer");

                    b.Property<int>("CounterId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomGroupId")
                        .HasColumnType("integer");

                    b.HasKey("UtsavId", "CounterId", "RoomGroupId");

                    b.HasIndex(new[] { "CounterId" }, "IX_CounterRoomGroup_CounterId");

                    b.HasIndex(new[] { "RoomGroupId" }, "IX_CounterRoomGroup_RoomGroupId");

                    b.ToTable("CounterRoomGroup", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContinentId")
                        .HasColumnType("integer");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContinentId" }, "IX_Country_ContinentId");

                    b.HasIndex(new[] { "Name" }, "IX_Country_Name")
                        .IsUnique();

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.DeviceCode", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreationTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DeviceCode1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DeviceCode");

                    b.Property<string>("Expiration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<string>("SubjectId")
                        .HasColumnType("text");

                    b.HasKey("UserCode");

                    b.HasIndex(new[] { "DeviceCode1" }, "IX_DeviceCodes_DeviceCode")
                        .IsUnique();

                    b.HasIndex(new[] { "Expiration" }, "IX_DeviceCodes_Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Floor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Floor_Name")
                        .IsUnique();

                    b.ToTable("Floor", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Haribhakt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasColumnType("text");

                    b.Property<int?>("StateId")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryId" }, "IX_Haribhakt_CountryId");

                    b.HasIndex(new[] { "StateId" }, "IX_Haribhakt_StateId");

                    b.HasIndex(new[] { "UniqueId" }, "IX_Haribhakt_UniqueId");

                    b.ToTable("Haribhakt", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("text");

                    b.Property<string>("AreaOrMilestone")
                        .HasColumnType("text");

                    b.Property<string>("AvailableFrom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AvailableTo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<int>("HouseTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<int>("IsClosed")
                        .HasColumnType("integer");

                    b.Property<int>("IsFavourite")
                        .HasColumnType("integer");

                    b.Property<int>("IsSatsangi")
                        .HasColumnType("integer");

                    b.Property<int>("IsVerified")
                        .HasColumnType("integer");

                    b.Property<int>("IsWholeFamilyInSeva")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Lat")
                        .HasColumnType("DECIMAL(12, 8)");

                    b.Property<string>("LocationQuality")
                        .HasColumnType("text");

                    b.Property<string>("LocationUrl")
                        .HasColumnType("text");

                    b.Property<decimal?>("Long")
                        .HasColumnType("DECIMAL(12, 8)");

                    b.Property<string>("ModifiedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("OccupancyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("RoomGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueId")
                        .HasColumnType("text");

                    b.Property<double?>("UtsavDistance")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AvailableFrom" }, "IX_House_AvailableFrom");

                    b.HasIndex(new[] { "AvailableTo" }, "IX_House_AvailableTo");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_House_CreatedAt");

                    b.HasIndex(new[] { "CreatedById" }, "IX_House_CreatedById");

                    b.HasIndex(new[] { "HouseTypeId" }, "IX_House_HouseTypeId");

                    b.HasIndex(new[] { "ModifiedAt" }, "IX_House_ModifiedAt");

                    b.HasIndex(new[] { "ModifiedById" }, "IX_House_ModifiedById");

                    b.HasIndex(new[] { "RoomGroupId" }, "IX_House_RoomGroupId");

                    b.HasIndex(new[] { "UniqueId" }, "IX_House_UniqueId")
                        .IsUnique();

                    b.ToTable("House", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.HouseAmenity", b =>
                {
                    b.Property<int>("HouseId")
                        .HasColumnType("integer");

                    b.Property<int>("AmenityId")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.HasKey("HouseId", "AmenityId");

                    b.HasIndex(new[] { "AmenityId" }, "IX_HouseAmenity_AmenityId");

                    b.HasIndex(new[] { "HouseId" }, "IX_HouseAmenity_HouseId");

                    b.ToTable("HouseAmenity", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.HouseContact", b =>
                {
                    b.Property<int>("HouseId")
                        .HasColumnType("integer");

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ContactId")
                        .HasColumnType("integer");

                    b.Property<int>("IsDefault")
                        .HasColumnType("integer");

                    b.HasKey("HouseId", "ContactTypeId", "ContactId");

                    b.HasIndex(new[] { "ContactId" }, "IX_HouseContact_ContactId");

                    b.HasIndex(new[] { "ContactTypeId" }, "IX_HouseContact_ContactTypeId");

                    b.HasIndex(new[] { "HouseId" }, "IX_HouseContact_HouseId");

                    b.ToTable("HouseContact", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.HouseInventory", b =>
                {
                    b.Property<int>("HouseId")
                        .HasColumnType("integer");

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("Actual")
                        .HasColumnType("integer");

                    b.Property<int>("ReqOwner")
                        .HasColumnType("integer");

                    b.Property<int>("ReqUtara")
                        .HasColumnType("integer");

                    b.Property<int?>("WindUp")
                        .HasColumnType("integer");

                    b.HasKey("HouseId", "InventoryId");

                    b.HasIndex(new[] { "HouseId" }, "IX_HouseInventory_HouseId");

                    b.HasIndex(new[] { "InventoryId" }, "IX_HouseInventory_InventoryId");

                    b.ToTable("HouseInventory", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.HouseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HouseType", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<string>("Src")
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueId")
                        .HasColumnType("text");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OwnerId" }, "IX_Image_OwnerId");

                    b.HasIndex(new[] { "Src" }, "IX_Image_Src");

                    b.HasIndex(new[] { "TypeId" }, "IX_Image_TypeId");

                    b.HasIndex(new[] { "UniqueId" }, "IX_Image_UniqueId")
                        .IsUnique();

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.ImageType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_ImageType_Name")
                        .IsUnique();

                    b.ToTable("ImageType", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Inventory", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Created")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DataProtected")
                        .HasColumnType("integer");

                    b.Property<int>("IsX509certificate")
                        .HasColumnType("integer")
                        .HasColumnName("IsX509Certificate");

                    b.Property<string>("Use")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Use" }, "IX_Keys_Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.MaintenanceIssue", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<int>("IsCritical")
                        .HasColumnType("integer");

                    b.Property<int?>("LostOrDamagedQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex(new[] { "RoomId" }, "IX_MaintenanceIssue_RoomId");

                    b.ToTable("MaintenanceIssue", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.MemCache", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AbsoluteExpiration")
                        .HasColumnType("text");

                    b.Property<string>("AbsoluteExpirationRelativeToNow")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("SlidingExpiration")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MemCache", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConsumedTime")
                        .HasColumnType("text");

                    b.Property<string>("CreationTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Expiration")
                        .HasColumnType("text");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<string>("SubjectId")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.HasIndex(new[] { "ConsumedTime" }, "IX_PersistedGrants_ConsumedTime");

                    b.HasIndex(new[] { "Expiration" }, "IX_PersistedGrants_Expiration");

                    b.HasIndex(new[] { "SubjectId", "ClientId", "Type" }, "IX_PersistedGrants_SubjectId_ClientId_Type");

                    b.HasIndex(new[] { "SubjectId", "SessionId", "Type" }, "IX_PersistedGrants_SubjectId_SessionId_Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.PreAllotment", b =>
                {
                    b.Property<int>("AccReqId")
                        .HasColumnType("integer");

                    b.Property<string>("AllotedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AllotedById")
                        .HasColumnType("text");

                    b.Property<int>("AllowPrivateDormitory")
                        .HasColumnType("integer");

                    b.Property<string>("ExpCheckInTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExpCheckOutTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<int?>("IsAuto")
                        .HasColumnType("integer");

                    b.Property<int>("IsPrivate")
                        .HasColumnType("integer");

                    b.Property<int>("QueryRoomGroupId")
                        .HasColumnType("integer");

                    b.HasKey("AccReqId");

                    b.HasIndex("AllotedById");

                    b.HasIndex("QueryRoomGroupId");

                    b.ToTable("PreAllotment", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.PreAllotmentDetail", b =>
                {
                    b.Property<int>("AccReqId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("GentsCount")
                        .HasColumnType("integer");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<int>("IsExplicit")
                        .HasColumnType("integer");

                    b.Property<int>("LadiesCount")
                        .HasColumnType("integer");

                    b.HasKey("AccReqId", "RoomId");

                    b.HasIndex(new[] { "RoomId" }, "IX_PreAllotmentDetail_RoomId");

                    b.ToTable("PreAllotmentDetail", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.QueryRoomGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RgtypeId")
                        .HasColumnType("integer")
                        .HasColumnName("RGTypeId");

                    b.Property<int>("RoomGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Sql")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SQL");

                    b.Property<int>("UtsavId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_QueryRoomGroup_CreatedAt");

                    b.HasIndex(new[] { "CreatedById" }, "IX_QueryRoomGroup_CreatedById");

                    b.HasIndex(new[] { "ModifiedAt" }, "IX_QueryRoomGroup_ModifiedAt");

                    b.HasIndex(new[] { "ModifiedById" }, "IX_QueryRoomGroup_ModifiedById");

                    b.HasIndex(new[] { "Name" }, "IX_QueryRoomGroup_Name");

                    b.HasIndex(new[] { "RgtypeId" }, "IX_QueryRoomGroup_RGTypeId");

                    b.HasIndex(new[] { "RoomGroupId" }, "IX_QueryRoomGroup_RoomGroupId");

                    b.HasIndex(new[] { "UtsavId" }, "IX_QueryRoomGroup_UtsavId");

                    b.ToTable("QueryRoomGroup", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Relation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Relation_Name")
                        .IsUnique();

                    b.ToTable("Relation", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sql")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SQL");

                    b.HasKey("Id");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.ReqTransMode", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_ReqTransMode_Name")
                        .IsUnique();

                    b.ToTable("ReqTransMode", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.RequestMode", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_RequestMode_Name")
                        .IsUnique();

                    b.ToTable("RequestMode", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Bhk")
                        .HasColumnType("integer")
                        .HasColumnName("BHK");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<decimal?>("DefaultRate")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.Property<decimal?>("Deposit")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.Property<int?>("FloorId")
                        .HasColumnType("integer");

                    b.Property<string>("Grade")
                        .HasColumnType("text");

                    b.Property<int?>("HouseId")
                        .HasColumnType("integer");

                    b.Property<int>("IsDormitory")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("OccupancyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OriginalCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("Postfix")
                        .HasColumnType("text");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("RoomGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomNo")
                        .HasColumnType("integer");

                    b.Property<int>("RtgentsCount")
                        .HasColumnType("integer")
                        .HasColumnName("RTGentsCount");

                    b.Property<int?>("RtisPrivate")
                        .HasColumnType("integer")
                        .HasColumnName("RTIsPrivate");

                    b.Property<int>("RtladiesCount")
                        .HasColumnType("integer")
                        .HasColumnName("RTLadiesCount");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_Room_CreatedAt");

                    b.HasIndex(new[] { "CreatedById" }, "IX_Room_CreatedById");

                    b.HasIndex(new[] { "FloorId" }, "IX_Room_FloorId");

                    b.HasIndex(new[] { "Grade" }, "IX_Room_Grade");

                    b.HasIndex(new[] { "HouseId" }, "IX_Room_HouseId");

                    b.HasIndex(new[] { "ModifiedAt" }, "IX_Room_ModifiedAt");

                    b.HasIndex(new[] { "ModifiedById" }, "IX_Room_ModifiedById");

                    b.HasIndex(new[] { "RoomGroupId" }, "IX_Room_RoomGroupId");

                    b.HasIndex(new[] { "StatusId" }, "IX_Room_StatusId");

                    b.HasIndex(new[] { "UniqueId" }, "IX_Room_UniqueId")
                        .IsUnique();

                    b.HasIndex(new[] { "RoomNo" }, "UIX_BuildingId_RoomNo")
                        .IsUnique();

                    b.ToTable("Room", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.RoomAmenity", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("AmenityId")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.HasKey("RoomId", "AmenityId");

                    b.HasIndex(new[] { "AmenityId" }, "IX_RoomAmenity_AmenityId");

                    b.HasIndex(new[] { "RoomId" }, "IX_RoomAmenity_RoomId");

                    b.ToTable("RoomAmenity", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.RoomCleaningStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("CleaningStatus")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex(new[] { "RoomId" }, "IX_RoomCleaningStatus_RoomId");

                    b.ToTable("RoomCleaningStatus", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.RoomGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("text");

                    b.Property<string>("AreaOrMilestone")
                        .HasColumnType("text");

                    b.Property<string>("AvailableFrom")
                        .HasColumnType("text");

                    b.Property<string>("AvailableUpto")
                        .HasColumnType("text");

                    b.Property<decimal?>("CancellationNoticeHours")
                        .HasColumnType("DECIMAL(5, 2)");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<string>("DisplayId")
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<int>("IsPermanent")
                        .HasColumnType("integer");

                    b.Property<int?>("IsReadOnly")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Lat")
                        .HasColumnType("DECIMAL(12, 8)");

                    b.Property<string>("LocationQuality")
                        .HasColumnType("text");

                    b.Property<string>("LocationUrl")
                        .HasColumnType("text");

                    b.Property<decimal?>("Long")
                        .HasColumnType("DECIMAL(12, 8)");

                    b.Property<int?>("MandirUtsavId")
                        .HasColumnType("integer");

                    b.Property<int?>("MinOccupancyRoomCount")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NegCheckInTime")
                        .HasColumnType("text");

                    b.Property<string>("NegCheckOutTime")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("RgtypeId")
                        .HasColumnType("integer")
                        .HasColumnName("RGTypeId");

                    b.Property<string>("UniqueId")
                        .HasColumnType("text");

                    b.Property<double?>("UtsavDistance")
                        .HasColumnType("double precision");

                    b.Property<int>("UtsavId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_RoomGroup_CreatedAt");

                    b.HasIndex(new[] { "CreatedById" }, "IX_RoomGroup_CreatedById");

                    b.HasIndex(new[] { "MandirUtsavId" }, "IX_RoomGroup_MandirUtsavId");

                    b.HasIndex(new[] { "ModifiedAt" }, "IX_RoomGroup_ModifiedAt");

                    b.HasIndex(new[] { "ModifiedById" }, "IX_RoomGroup_ModifiedById");

                    b.HasIndex(new[] { "Name" }, "IX_RoomGroup_Name");

                    b.HasIndex(new[] { "RgtypeId" }, "IX_RoomGroup_RGTypeId");

                    b.HasIndex(new[] { "UniqueId" }, "IX_RoomGroup_UniqueId")
                        .IsUnique();

                    b.HasIndex(new[] { "UtsavId" }, "IX_RoomGroup_UtsavId");

                    b.ToTable("RoomGroup", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.RoomGroupAmenity", b =>
                {
                    b.Property<int>("RoomGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("AmenityId")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.HasKey("RoomGroupId", "AmenityId");

                    b.HasIndex(new[] { "AmenityId" }, "IX_RoomGroupAmenity_AmenityId");

                    b.HasIndex(new[] { "RoomGroupId" }, "IX_RoomGroupAmenity_RoomGroupId");

                    b.ToTable("RoomGroupAmenity", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.RoomGroupContact", b =>
                {
                    b.Property<int>("RoomGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ContactId")
                        .HasColumnType("integer");

                    b.Property<int>("IsDefault")
                        .HasColumnType("integer");

                    b.HasKey("RoomGroupId", "ContactTypeId", "ContactId");

                    b.HasIndex(new[] { "ContactId" }, "IX_RoomGroupContact_ContactId");

                    b.HasIndex(new[] { "ContactTypeId" }, "IX_RoomGroupContact_ContactTypeId");

                    b.HasIndex(new[] { "RoomGroupId" }, "IX_RoomGroupContact_RoomGroupId");

                    b.ToTable("RoomGroupContact", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.RoomGroupType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_RoomGroupType_Name")
                        .IsUnique();

                    b.ToTable("RoomGroupType", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.RoomInventory", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("InventoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("Actual")
                        .HasColumnType("integer");

                    b.Property<int>("ReqOwner")
                        .HasColumnType("integer");

                    b.Property<int>("ReqUtara")
                        .HasColumnType("integer");

                    b.Property<int?>("WindUp")
                        .HasColumnType("integer");

                    b.HasKey("RoomId", "InventoryId");

                    b.HasIndex(new[] { "InventoryId" }, "IX_RoomInventory_InventoryId");

                    b.HasIndex(new[] { "RoomId" }, "IX_RoomInventory_RoomId");

                    b.ToTable("RoomInventory", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.RoomStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_RoomStatus_Name")
                        .IsUnique();

                    b.ToTable("RoomStatus", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryId" }, "IX_State_CountryId");

                    b.HasIndex(new[] { "Name" }, "IX_State_Name");

                    b.ToTable("State", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.UserRoomGroup", b =>
                {
                    b.Property<int>("RoomGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex(new[] { "RoomGroupId" }, "IX_UserRoomGroup_RoomGroupId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserRoomGroup_UserId");

                    b.ToTable("UserRoomGroup", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.UserRoomGroupType", b =>
                {
                    b.Property<int>("RgtypeId")
                        .HasColumnType("integer")
                        .HasColumnName("RGTypeId");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex(new[] { "RgtypeId" }, "IX_UserRoomGroupType_RGTypeId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserRoomGroupType_UserId");

                    b.ToTable("UserRoomGroupType", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Utsav", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .HasColumnType("text");

                    b.Property<string>("Address3")
                        .HasColumnType("text");

                    b.Property<string>("AreaOrMilestone")
                        .HasColumnType("text");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<string>("DefaultArrivalAt")
                        .HasColumnType("text");

                    b.Property<string>("DefaultDepartureAt")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EndsOn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IsClosed")
                        .HasColumnType("integer");

                    b.Property<int>("IsMandir")
                        .HasColumnType("integer");

                    b.Property<int?>("LastDownloadedWebAccReqId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Lat")
                        .HasColumnType("DECIMAL(12, 8)");

                    b.Property<string>("LocationUrl")
                        .HasColumnType("text");

                    b.Property<decimal?>("Long")
                        .HasColumnType("DECIMAL(12, 8)");

                    b.Property<string>("ModifiedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("StandardCheckinTime")
                        .HasColumnType("text");

                    b.Property<string>("StandardCheckoutTime")
                        .HasColumnType("text");

                    b.Property<string>("StartsOn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UniqueId")
                        .HasColumnType("text");

                    b.Property<string>("WebAccReqPrefix")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedAt" }, "IX_Utsav_CreatedAt");

                    b.HasIndex(new[] { "CreatedById" }, "IX_Utsav_CreatedById");

                    b.HasIndex(new[] { "DefaultArrivalAt" }, "IX_Utsav_DefaultArrivalAt");

                    b.HasIndex(new[] { "DefaultDepartureAt" }, "IX_Utsav_DefaultDepartureAt");

                    b.HasIndex(new[] { "EndsOn" }, "IX_Utsav_EndsOn");

                    b.HasIndex(new[] { "ModifiedAt" }, "IX_Utsav_ModifiedAt");

                    b.HasIndex(new[] { "ModifiedById" }, "IX_Utsav_ModifiedById");

                    b.HasIndex(new[] { "StartsOn" }, "IX_Utsav_StartsOn");

                    b.HasIndex(new[] { "UniqueId" }, "IX_Utsav_UniqueId")
                        .IsUnique();

                    b.ToTable("Utsav", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.WebAccReq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("ArrivalDate")
                        .HasColumnType("text");

                    b.Property<string>("ArrivalTime")
                        .HasColumnType("text");

                    b.Property<int?>("ChildrenCount")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DepatureDate")
                        .HasColumnType("text");

                    b.Property<string>("DepatureTime")
                        .HasColumnType("text");

                    b.Property<string>("DownloadedAt")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<int?>("GentsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Honorific")
                        .HasColumnType("text");

                    b.Property<string>("ImportedAt")
                        .HasColumnType("text");

                    b.Property<int>("IsKeepingVehicle")
                        .HasColumnType("integer");

                    b.Property<int?>("LadiesCount")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("LocalPhone")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NativePlace")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("RequestedAt")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TransportMode")
                        .HasColumnType("text");

                    b.Property<int>("UtsavId")
                        .HasColumnType("integer");

                    b.Property<string>("WebReqId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WhatsApp")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DownloadedAt" }, "IX_WebAccReq_DownloadedAt");

                    b.HasIndex(new[] { "ImportedAt" }, "IX_WebAccReq_ImportedAt");

                    b.HasIndex(new[] { "RequestedAt" }, "IX_WebAccReq_RequestedAt");

                    b.HasIndex(new[] { "UtsavId" }, "IX_WebAccReq_UtsavId");

                    b.HasIndex(new[] { "WebReqId" }, "IX_WebAccReq_WebReqId")
                        .IsUnique();

                    b.ToTable("WebAccReq", (string)null);
                });

            modelBuilder.Entity("SAMP.Domain.Entities.WebAccReqDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Relation")
                        .HasColumnType("text");

                    b.Property<int>("WebAccReqId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "WebAccReqId" }, "IX_WebAccReqDetail_WebAccReqId");

                    b.ToTable("WebAccReqDetail", (string)null);
                });

            modelBuilder.Entity("AitypeAmenity", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.Aitype", null)
                        .WithMany()
                        .HasForeignKey("AitypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.Amenity", null)
                        .WithMany()
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AitypeInventory", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.Aitype", null)
                        .WithMany()
                        .HasForeignKey("AitypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.Inventory", null)
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReportRole", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleQueryRoomGroup", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.QueryRoomGroup", null)
                        .WithMany()
                        .HasForeignKey("QueryRoomGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AccDetail", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.AccReq", "AccReq")
                        .WithMany("AccDetails")
                        .HasForeignKey("AccReqId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "AllotedBy")
                        .WithMany("AccDetails")
                        .HasForeignKey("AllotedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.Room", "Room")
                        .WithMany("AccDetails")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccReq");

                    b.Navigation("AllotedBy");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AccReq", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.City", "City")
                        .WithMany("AccReqs")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "CreatedBy")
                        .WithMany("AccReqCreatedBies")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "ModifiedBy")
                        .WithMany("AccReqModifiedBies")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.ReqTransMode", "ReqTransMode")
                        .WithMany("AccReqs")
                        .HasForeignKey("ReqTransModeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.AccReqStatus", "Status")
                        .WithMany("AccReqs")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.Utsav", "Utsav")
                        .WithMany("AccReqs")
                        .HasForeignKey("UtsavId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ReqTransMode");

                    b.Navigation("Status");

                    b.Navigation("Utsav");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AccReqDetail", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.AccReq", "AccReq")
                        .WithMany("AccReqDetails")
                        .HasForeignKey("AccReqId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.Relation", "Relation")
                        .WithMany("AccReqDetails")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccReq");

                    b.Navigation("Relation");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AccReqToken", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.AccReq", "AccReq")
                        .WithMany("AccReqTokens")
                        .HasForeignKey("AccReqId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.City", "InviterCity")
                        .WithMany("AccReqTokens")
                        .HasForeignKey("InviterCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccReq");

                    b.Navigation("InviterCity");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AspNetRoleClaim", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AspNetUserClaim", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AspNetUserLogin", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AspNetUserToken", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.City", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Contact", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.Utsav", "Utsav")
                        .WithMany("Contacts")
                        .HasForeignKey("UtsavId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Utsav");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.ContactPhone", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.Contact", "Contact")
                        .WithMany("ContactPhones")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Counter", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "CreatedBy")
                        .WithMany("CounterCreatedBies")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "ModifiedBy")
                        .WithMany("CounterModifiedBies")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.Utsav", "Utsav")
                        .WithMany("Counters")
                        .HasForeignKey("UtsavId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Utsav");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.CounterRoomGroup", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.Counter", "Counter")
                        .WithMany("CounterRoomGroups")
                        .HasForeignKey("CounterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.RoomGroup", "RoomGroup")
                        .WithMany("CounterRoomGroups")
                        .HasForeignKey("RoomGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.Utsav", "Utsav")
                        .WithMany("CounterRoomGroups")
                        .HasForeignKey("UtsavId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Counter");

                    b.Navigation("RoomGroup");

                    b.Navigation("Utsav");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Country", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.Continent", "Continent")
                        .WithMany("Countries")
                        .HasForeignKey("ContinentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Continent");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Haribhakt", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.Country", "Country")
                        .WithMany("Haribhakts")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.State", "State")
                        .WithMany("Haribhakts")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.House", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "CreatedBy")
                        .WithMany("HouseCreatedBies")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.HouseType", "HouseType")
                        .WithMany("Houses")
                        .HasForeignKey("HouseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "ModifiedBy")
                        .WithMany("HouseModifiedBies")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.RoomGroup", "RoomGroup")
                        .WithMany("Houses")
                        .HasForeignKey("RoomGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("HouseType");

                    b.Navigation("ModifiedBy");

                    b.Navigation("RoomGroup");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.HouseAmenity", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.Amenity", "Amenity")
                        .WithMany("HouseAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.House", "House")
                        .WithMany("HouseAmenities")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("House");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.HouseContact", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.Contact", "Contact")
                        .WithMany("HouseContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.ContactType", "ContactType")
                        .WithMany("HouseContacts")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.House", "House")
                        .WithMany("HouseContacts")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("ContactType");

                    b.Navigation("House");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.HouseInventory", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.House", "House")
                        .WithMany("HouseInventories")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.Inventory", "Inventory")
                        .WithMany("HouseInventories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("House");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Image", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.ImageType", "Type")
                        .WithMany("Images")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.MaintenanceIssue", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "CreatedBy")
                        .WithMany("MaintenanceIssueCreatedBies")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.Inventory", "Inventory")
                        .WithMany("MaintenanceIssues")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "ModifiedBy")
                        .WithMany("MaintenanceIssueModifiedBies")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.Room", "Room")
                        .WithMany("MaintenanceIssues")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Inventory");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.PreAllotment", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.AccReq", "AccReq")
                        .WithOne("PreAllotment")
                        .HasForeignKey("SAMP.Domain.Entities.PreAllotment", "AccReqId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "AllotedBy")
                        .WithMany("PreAllotments")
                        .HasForeignKey("AllotedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.QueryRoomGroup", "QueryRoomGroup")
                        .WithMany("PreAllotments")
                        .HasForeignKey("QueryRoomGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccReq");

                    b.Navigation("AllotedBy");

                    b.Navigation("QueryRoomGroup");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.PreAllotmentDetail", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.AccReq", "AccReq")
                        .WithMany("PreAllotmentDetails")
                        .HasForeignKey("AccReqId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.Room", "Room")
                        .WithMany("PreAllotmentDetails")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccReq");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.QueryRoomGroup", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "CreatedBy")
                        .WithMany("QueryRoomGroupCreatedBies")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "ModifiedBy")
                        .WithMany("QueryRoomGroupModifiedBies")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.RoomGroupType", "Rgtype")
                        .WithMany("QueryRoomGroups")
                        .HasForeignKey("RgtypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.RoomGroup", "RoomGroup")
                        .WithMany("QueryRoomGroups")
                        .HasForeignKey("RoomGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.Utsav", "Utsav")
                        .WithMany("QueryRoomGroups")
                        .HasForeignKey("UtsavId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Rgtype");

                    b.Navigation("RoomGroup");

                    b.Navigation("Utsav");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Room", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "CreatedBy")
                        .WithMany("RoomCreatedBies")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.House", "House")
                        .WithMany("Rooms")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "ModifiedBy")
                        .WithMany("RoomModifiedBies")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.RoomGroup", "RoomGroup")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.RoomStatus", "Status")
                        .WithMany("Rooms")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Floor");

                    b.Navigation("House");

                    b.Navigation("ModifiedBy");

                    b.Navigation("RoomGroup");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.RoomAmenity", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.Amenity", "Amenity")
                        .WithMany("RoomAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.Room", "Room")
                        .WithMany("RoomAmenities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.RoomCleaningStatus", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "CreatedBy")
                        .WithMany("RoomCleaningStatusCreatedBies")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "ModifiedBy")
                        .WithMany("RoomCleaningStatusModifiedBies")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.Room", "Room")
                        .WithMany("RoomCleaningStatuses")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.RoomGroup", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "CreatedBy")
                        .WithMany("RoomGroupCreatedBies")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.Utsav", "MandirUtsav")
                        .WithMany("RoomGroupMandirUtsavs")
                        .HasForeignKey("MandirUtsavId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "ModifiedBy")
                        .WithMany("RoomGroupModifiedBies")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.RoomGroupType", "Rgtype")
                        .WithMany("RoomGroups")
                        .HasForeignKey("RgtypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.Utsav", "Utsav")
                        .WithMany("RoomGroupUtsavs")
                        .HasForeignKey("UtsavId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("MandirUtsav");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Rgtype");

                    b.Navigation("Utsav");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.RoomGroupAmenity", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.Amenity", "Amenity")
                        .WithMany("RoomGroupAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.RoomGroup", "RoomGroup")
                        .WithMany("RoomGroupAmenities")
                        .HasForeignKey("RoomGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("RoomGroup");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.RoomGroupContact", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.Contact", "Contact")
                        .WithMany("RoomGroupContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.ContactType", "ContactType")
                        .WithMany("RoomGroupContacts")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.RoomGroup", "RoomGroup")
                        .WithMany("RoomGroupContacts")
                        .HasForeignKey("RoomGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("ContactType");

                    b.Navigation("RoomGroup");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.RoomInventory", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.Inventory", "Inventory")
                        .WithMany("RoomInventories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.Room", "Room")
                        .WithMany("RoomInventories")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.State", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.UserRoomGroup", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.RoomGroup", "RoomGroup")
                        .WithMany()
                        .HasForeignKey("RoomGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.UserRoomGroupType", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.RoomGroupType", "Rgtype")
                        .WithMany()
                        .HasForeignKey("RgtypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rgtype");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Utsav", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "CreatedBy")
                        .WithMany("UtsavCreatedBies")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SAMP.Domain.Entities.AspNetUser", "ModifiedBy")
                        .WithMany("UtsavModifiedBies")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.WebAccReq", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.Utsav", "Utsav")
                        .WithMany("WebAccReqs")
                        .HasForeignKey("UtsavId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Utsav");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.WebAccReqDetail", b =>
                {
                    b.HasOne("SAMP.Domain.Entities.WebAccReq", "WebAccReq")
                        .WithMany("WebAccReqDetails")
                        .HasForeignKey("WebAccReqId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WebAccReq");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AccReq", b =>
                {
                    b.Navigation("AccDetails");

                    b.Navigation("AccReqDetails");

                    b.Navigation("AccReqTokens");

                    b.Navigation("PreAllotment");

                    b.Navigation("PreAllotmentDetails");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AccReqStatus", b =>
                {
                    b.Navigation("AccReqs");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Amenity", b =>
                {
                    b.Navigation("HouseAmenities");

                    b.Navigation("RoomAmenities");

                    b.Navigation("RoomGroupAmenities");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.AspNetUser", b =>
                {
                    b.Navigation("AccDetails");

                    b.Navigation("AccReqCreatedBies");

                    b.Navigation("AccReqModifiedBies");

                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("CounterCreatedBies");

                    b.Navigation("CounterModifiedBies");

                    b.Navigation("HouseCreatedBies");

                    b.Navigation("HouseModifiedBies");

                    b.Navigation("MaintenanceIssueCreatedBies");

                    b.Navigation("MaintenanceIssueModifiedBies");

                    b.Navigation("PreAllotments");

                    b.Navigation("QueryRoomGroupCreatedBies");

                    b.Navigation("QueryRoomGroupModifiedBies");

                    b.Navigation("RoomCleaningStatusCreatedBies");

                    b.Navigation("RoomCleaningStatusModifiedBies");

                    b.Navigation("RoomCreatedBies");

                    b.Navigation("RoomGroupCreatedBies");

                    b.Navigation("RoomGroupModifiedBies");

                    b.Navigation("RoomModifiedBies");

                    b.Navigation("UtsavCreatedBies");

                    b.Navigation("UtsavModifiedBies");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.City", b =>
                {
                    b.Navigation("AccReqTokens");

                    b.Navigation("AccReqs");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Contact", b =>
                {
                    b.Navigation("ContactPhones");

                    b.Navigation("HouseContacts");

                    b.Navigation("RoomGroupContacts");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.ContactType", b =>
                {
                    b.Navigation("HouseContacts");

                    b.Navigation("RoomGroupContacts");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Continent", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Counter", b =>
                {
                    b.Navigation("CounterRoomGroups");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Country", b =>
                {
                    b.Navigation("Haribhakts");

                    b.Navigation("States");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.House", b =>
                {
                    b.Navigation("HouseAmenities");

                    b.Navigation("HouseContacts");

                    b.Navigation("HouseInventories");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.HouseType", b =>
                {
                    b.Navigation("Houses");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.ImageType", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Inventory", b =>
                {
                    b.Navigation("HouseInventories");

                    b.Navigation("MaintenanceIssues");

                    b.Navigation("RoomInventories");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.QueryRoomGroup", b =>
                {
                    b.Navigation("PreAllotments");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Relation", b =>
                {
                    b.Navigation("AccReqDetails");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.ReqTransMode", b =>
                {
                    b.Navigation("AccReqs");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Room", b =>
                {
                    b.Navigation("AccDetails");

                    b.Navigation("MaintenanceIssues");

                    b.Navigation("PreAllotmentDetails");

                    b.Navigation("RoomAmenities");

                    b.Navigation("RoomCleaningStatuses");

                    b.Navigation("RoomInventories");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.RoomGroup", b =>
                {
                    b.Navigation("CounterRoomGroups");

                    b.Navigation("Houses");

                    b.Navigation("QueryRoomGroups");

                    b.Navigation("RoomGroupAmenities");

                    b.Navigation("RoomGroupContacts");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.RoomGroupType", b =>
                {
                    b.Navigation("QueryRoomGroups");

                    b.Navigation("RoomGroups");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.RoomStatus", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.State", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Haribhakts");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.Utsav", b =>
                {
                    b.Navigation("AccReqs");

                    b.Navigation("Contacts");

                    b.Navigation("CounterRoomGroups");

                    b.Navigation("Counters");

                    b.Navigation("QueryRoomGroups");

                    b.Navigation("RoomGroupMandirUtsavs");

                    b.Navigation("RoomGroupUtsavs");

                    b.Navigation("WebAccReqs");
                });

            modelBuilder.Entity("SAMP.Domain.Entities.WebAccReq", b =>
                {
                    b.Navigation("WebAccReqDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
